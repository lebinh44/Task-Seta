{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as postsAPI from \"./postsAPI\";\nexport const getPosts = createAsyncThunk(\"posts/fetchAll\", postsAPI.getPosts);\nexport const createPost = createAsyncThunk(\"posts/add\", postsAPI.createPost);\nexport const updatePost = createAsyncThunk(\"posts/update\", async ({\n  id,\n  data\n}) => await postsAPI.updatePost(id, data));\nexport const deletePost = createAsyncThunk(\"posts/delete\", postsAPI.deletePost);\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    items: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getPosts.pending, state => {\n      state.loading = true;\n    }).addCase(getPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.items = action.payload.data;\n    }).addCase(getPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    }).addCase(createPost.fulfilled, (state, action) => {\n      state.items.push(action.payload.data);\n    }).addCase(updatePost.fulfilled, (state, action) => {\n      const idx = state.items.findIndex(p => p._id === action.payload.data._id);\n      if (idx !== -1) state.items[idx] = action.payload.data;\n    }).addCase(deletePost.fulfilled, (state, action) => {\n      state.items = state.items.filter(p => p._id !== action.meta.arg);\n    });\n  }\n});\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","postsAPI","getPosts","createPost","updatePost","id","data","deletePost","postsSlice","name","initialState","items","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","idx","findIndex","p","_id","filter","meta","arg","reducer"],"sources":["/Users/lebinh/Task3/client/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport * as postsAPI from \"./postsAPI\";\n\nexport const getPosts = createAsyncThunk(\"posts/fetchAll\", postsAPI.getPosts);\nexport const createPost = createAsyncThunk(\"posts/add\", postsAPI.createPost);\nexport const updatePost = createAsyncThunk(\n  \"posts/update\",\n  async ({ id, data }) => await postsAPI.updatePost(id, data)\n);\nexport const deletePost = createAsyncThunk(\"posts/delete\", postsAPI.deletePost);\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPosts.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getPosts.fulfilled, (state, action) => {\n        state.loading = false;\n        state.items = action.payload.data;\n      })\n      .addCase(getPosts.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      })\n      .addCase(createPost.fulfilled, (state, action) => {\n        state.items.push(action.payload.data);\n      })\n      .addCase(updatePost.fulfilled, (state, action) => {\n        const idx = state.items.findIndex(\n          (p) => p._id === action.payload.data._id\n        );\n        if (idx !== -1) state.items[idx] = action.payload.data;\n      })\n      .addCase(deletePost.fulfilled, (state, action) => {\n        state.items = state.items.filter((p) => p._id !== action.meta.arg);\n      });\n  },\n});\n\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAO,KAAKC,QAAQ,MAAM,YAAY;AAEtC,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CAAC,gBAAgB,EAAEC,QAAQ,CAACC,QAAQ,CAAC;AAC7E,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,WAAW,EAAEC,QAAQ,CAACE,UAAU,CAAC;AAC5E,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CACxC,cAAc,EACd,OAAO;EAAEK,EAAE;EAAEC;AAAK,CAAC,KAAK,MAAML,QAAQ,CAACG,UAAU,CAACC,EAAE,EAAEC,IAAI,CAC5D,CAAC;AACD,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CAAC,cAAc,EAAEC,QAAQ,CAACM,UAAU,CAAC;AAE/E,MAAMC,UAAU,GAAGT,WAAW,CAAC;EAC7BU,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,QAAQ,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACpCA,KAAK,CAACP,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDK,OAAO,CAACf,QAAQ,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO,CAAChB,IAAI;IACnC,CAAC,CAAC,CACDW,OAAO,CAACf,QAAQ,CAACqB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACd,UAAU,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACR,KAAK,CAACc,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAChB,IAAI,CAAC;IACvC,CAAC,CAAC,CACDW,OAAO,CAACb,UAAU,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChD,MAAMK,GAAG,GAAGP,KAAK,CAACR,KAAK,CAACgB,SAAS,CAC9BC,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKR,MAAM,CAACC,OAAO,CAAChB,IAAI,CAACuB,GACvC,CAAC;MACD,IAAIH,GAAG,KAAK,CAAC,CAAC,EAAEP,KAAK,CAACR,KAAK,CAACe,GAAG,CAAC,GAAGL,MAAM,CAACC,OAAO,CAAChB,IAAI;IACxD,CAAC,CAAC,CACDW,OAAO,CAACV,UAAU,CAACa,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACR,KAAK,GAAGQ,KAAK,CAACR,KAAK,CAACmB,MAAM,CAAEF,CAAC,IAAKA,CAAC,CAACC,GAAG,KAAKR,MAAM,CAACU,IAAI,CAACC,GAAG,CAAC;IACpE,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAexB,UAAU,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}